namespace Fixit.Parsers.Model.Internal;

public record Docs
{
    public IEnumerable<Item> Items { get; init; } = Enumerable.Empty<Item>();
    public IEnumerable<object> ConsumableEquipment { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Schematics { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Walls { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Doors { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<Recipe> Recipes { get; set; } = Enumerable.Empty<Recipe>();
    public IEnumerable<object> CustomizationRecipes { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Buildings { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> CornerWalls { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Biomass { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Chainsaw { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<Item> Equipment { get; set; } = Enumerable.Empty<Item>();        // Item should work but should probably generalize.
    public IEnumerable<object> GolfCart { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Suit { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> JetPack { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> JumpingStilts { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> ProjectileAmmo { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Weapons { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Ammo { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Spear { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Poles { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> ConveyorBelts { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> PowerPoles { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Wire { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<Resource> Resources { get; set; } = Enumerable.Empty<Resource>();
    public IEnumerable<object> TradingPost { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Sources { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Cartridges { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> GasMask { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Manufacturer { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> ResourceExtractors { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Miner { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Storage { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Buildables { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Fuels { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> SpaceElevator { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Consumables { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> NuclearFuel { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> MAM { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Beams { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Pillars { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Factories { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Walkway { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> PipelinePumps { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> PipelineSupports { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Pipelines { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> PipelineJunctions { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Reservoirs { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> WaterPump { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> ResourceSinks { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> SinkShop { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Vehicle { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Drone { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> FrackingExtractor { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> FrackingActivator { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> ManufacturingPower { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> NuclearGenerator { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> ConveyorLifts { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Foundations { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Ramp { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> SplitterSmart { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> AttachmentMerger { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> AttachmentSplitter { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> ObjectScanner { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableJumppack { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> ConveyorPoleStackable { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableDockingStation { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> PipeHyperStart { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildablePipeHyper { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildablePowerStorage { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableRailroadSignal { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableTrainPlatformCargo { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableTrainPlatformEmpty { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableRailroadStation { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableRailroadTrack { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> HoverPack { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> EquipmentZipLine { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableCircuitSwitch { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableGeneratorGeoThermal { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> Parachute { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableRadarTower { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> ChargedWeapon { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableFactorySimpleProducer { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableSnowDispenser { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableFactoryBuilding { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableWidgetSign { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableLightSource { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableLadder { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableStair { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableFloodlight { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildableLightsControlPanel { get; set; } = Enumerable.Empty<object>();
    public IEnumerable<object> BuildablePassthrough { get; set; } = Enumerable.Empty<object>();
};